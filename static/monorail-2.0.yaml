swagger: "2.0"
info:
  version: "0.0.1"
  title: RackHD 2.0
# during dev, should point to your local machine
#host: localhost:10010
# basePath prefixes all resource paths
basePath: /api/2.0
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
  - name: "/api/2.0"
    description: RackHD 2.0 API
paths:
  /pollers/library:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a list of possible pollers
      description: |
        Get a list of all available poller definitions in the poller library.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successful retrieval of the list of all pollers in the library
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/library/{identifier}:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersLibByIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the specified poller
      description: |
        Get the poller definition with the specified identifier from the poller library
      parameters:
        - name: identifier
          in: path
          description: |
            The poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successful retrieval of the specified poller
          schema:
            type: object
        404:
          description: |
            The poller with specified identifier not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: poller.2.0.json
      summary: |
        Get a list of all active pollers
      description: |
        Get list of all pollers that are currently running.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successful retrieval of the list of pollers
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: pollersPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: poller.2.0.json#/definitions/Poller
      x-view: poller.2.0.json
      summary: |
        Post a poller
      description: |
        Create and start a new poller, which will run
        at the specified time interval.
      parameters:
      - name: content
        in: body
        description: |
          The request body must contain the necessary information
          to create the poller, including type, pollInterval, and command. The
          node identifier must also be included if the poller is to be associated
          with a node.
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Poller created successfully
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: poller.2.0.json
      summary: |
        Get a specific poller
      description: |
        Get information associated with the specified poller, including
        type, run interval, command, and whether the poller is paused.
      parameters:
        - name: identifier
          in: path
          description: |
            The poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Poller information retrieved successfully
          schema:
            type: object
        404:
          description: |
            Poller with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: pollersPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: poller.2.0.json#/definitions/PartialPoller
      x-view: poller.2.0.json
      summary: |
        Patch a poller
      description: |
        Modify one or more properties of the poller with the
        specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The poller identifier
          required: true
          type: string
        - name: content
          in: body
          description: |
            The body must contain the specific properties of the
            poller that will be modified.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Poller was successfully modified
          schema:
            type: object
        404:
          description: |
            Poller with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: pollersDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete the specified poller
      description: |
        Delete the poller with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The poller identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Poller was deleted successfully
        404:
          description: |
            Poller with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersDataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get output data for a poller
      description: |
        Get the complete history of output data generated by the poller
        with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The identifier of the poller
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved poller data
          schema:
            type: object
        204:
          description: |
            Successfully processed the request and did not return any data
          schema:
            type: object
        404:
          description: |
            Poller with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /pollers/{identifier}/data/current:
    x-swagger-router-controller: pollers
    get:
      operationId: pollersCurrentDataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get latest data for a poller
      description: |
        Get latest output data generated by the poller
        poller with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The identifier of the poller
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved poller data
          schema:
            type: object
        204:
          description: |
            Successfully processed the request and did not return any data
          schema:
            type: object
        404:
          description: |
            Poller with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /templates/metadata:
    x-swagger-router-controller: templates
    get:
      operationId: templatesMetaGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get a list of metadata for all templates
      description: |
        Retrieves metadata for each defined template. The metadata
        includes the template name, and scope, not the actual
        contents of the template.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved all template metadata
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/metadata/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesMetaGetByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get the metadata for a specific template
      description: |
        Get metadata for the template with the specified name.
      parameters:
        - name: name
          in: path
          description: |
            The file name of the template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            The template scope
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the metadata of the template
            with the specified name
          schema:
            type: object
        404:
          description: |
            Template with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /templates/library/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesLibGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a single template
      description: |
        Get the contents of a single template file.
      parameters:
        - name: name
          in: path
          description: |
            The file name of the template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            The template scope
          required: false
          type: string
          default: 'global'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the contents of a single template
          schema:
            type: object
        404:
          description: |
            The template with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: templatesLibPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Put a single template
      description: |
        Create or update the metadata and the content of a single template.
      parameters:
        - name: name
          in: path
          description: |
            The name of the template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            The template scope
          required: false
          type: string
          default: 'global'
      consumes:
        - text/plain
        - application/x-www-form-urlencoded
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created the template
          schema:
            type: object
        404:
          description: |
            The template with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: templatesLibDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a single template
      description: |
        Delete the template with the specified name.
      parameters:
        - name: name
          in: path
          description: |
            The name of the template
          required: true
          type: string
        - name: scope
          in: query
          description: |
            The template scope
          required: false
          type: string
          default: 'global'
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified template
        404:
          description: |
            The template with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /templates/{name}:
    x-swagger-router-controller: templates
    get:
      operationId: templatesGetByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a single template
      description: |
        Get the template with the specified name.
      parameters:
        - name: name
          in: path
          description: |
            The name of the template
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfuly retrieved the specified template
          schema:
            type: object
        404:
          description: |
            The template with specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /views:
    x-swagger-router-controller: views
    get:
      operationId: viewsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get all views
      description: |
        Retrieve a list of all views. Views are used to render
        the output of various system resources, such as nodes,
        pollers, and OBM settings.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved views
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /views/{identifier}:
    x-swagger-router-controller: views
    get:
      operationId: viewsGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get a specific view
      description: |
        Get the view with the specified file name.
      parameters:
        - name: identifier
          in: path
          description: |
            The view name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the specified view
          schema:
            type: object
        404:
          description: |
            The view with specified name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: viewsPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      consumes:
        - text/plain
        - application/octet-stream
      summary: |
        Put a specific view
      description: |
        Create or update a view with the specified name.
      parameters:
        - name: identifier
          in: path
          description: |
            The name of view to create or update
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created the specified template
          schema:
            type: object
    delete:
      operationId: viewsDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a specific view
      description: |
        Delete the view with the specified name.
      parameters:
        - name: identifier
          in: path
          description: |
            The name of view to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully retrieved the specified template
          schema:
            type: object
        404:
          description: |
            The view with specified name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/pack:
    x-swagger-router-controller: skus
    post:
      consumes:
        - multipart/form-data
        - application/x-www-form-urlencoded
      operationId: skuPackPost
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post a SKU Pack
      description: |
        Create a new SKU Pack, which is used to serve a specific
        set of files to a node during provisioning.
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
             Successfully created the SKU Pack
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus:
    x-swagger-router-controller: skus
    get:
      operationId: skusGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of SKUs
      description: |
        Get list of currently defined SKUs, which are used to
        group nodes based on matching a set of rules with information
        present in a node's catalog.
      parameters:
        - name: query
          in: query
          description: SKU properties to search
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
             Successfully retrieved the list of SKUs
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: skusPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: skus.2.0.json#/definitions/SkusUpsert
      summary: |
        Post a SKU
      description: |
        Create a new SKU.
      parameters:
        - name: body
          in: body
          description: |
            The properties used to define the new SKU
          required: true
          schema:
                  $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created the SKU
          schema:
            type: object
        500:
          description: |
            Upload failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: skusPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: skus.2.0.json#/definitions/SkusUpsert
      summary: |
        Put a SKU
      description: |
        Create or modify a SKU.
      parameters:
        - name: body
          in: body
          description: |
            The properties used to define the SKU
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created or updated SKU definition
          schema:
            type: object
        500:
          description: |
            Update failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}:
    x-swagger-router-controller: skus
    get:
      operationId: skusIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a single SKU
      description: |
        Get the SKU with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The SKU identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfull retrieved the SKU
          schema:
            type: object
        404:
          description: |
            The SKU with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: skusPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Patch a SKU
      description: |
        Modify the SKU with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The sku identifier
          required: true
          type: string
        - name: body
          in: body
          description: The SKU properties to be modified
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully modified the specified SKU
          schema:
            type: object
        404:
          description: |
            The SKU with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: |
            SKU patch failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: skusIdDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a SKU
      description: |
        Delete the SKU with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The SKU identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the SKU
          schema:
            type: object
        404:
          description: |
            The SKU with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}/nodes:
    x-swagger-router-controller: skus
    get:
      operationId: skusIdGetNodes
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get nodes for specific SKU
      description: |
        Get the nodes associated with the specified SKU definition.
      parameters:
        - name: identifier
          in: path
          description: |
            The SKU identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the nodes associated with the specified SKU
          schema:
            type: object
        404:
          description: |
            The SKU with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /skus/{identifier}/pack:
    x-swagger-router-controller: skus
    put:
      operationId: skusIdPutPack
      x-privileges: [ 'write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Put a SKU Pack to a specific SKU
      description: |
        Create or modify a SKU Pack, and associate the
        SKU Pack with the specified SKU.
      parameters:
        - name: identifier
          in: path
          description: |
            The identifier of the SKU Pack
          required: true
          type: string
      tags: [ "/api/2.0" ]
      consumes:
        - application/x-www-form-urlencoded
      responses:
        201:
          description: |
            Successfully created the SKU Pack
          schema:
            type: object
        404:
          description: |
            The SKU with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: skusIdDeletePack
      x-privileges: [ 'write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a SKU Pack
      description: |
        Delete a SKU Pack associated with the specified SKU.
      parameters:
        - name: identifier
          in: path
          description: |
            The SKU identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      consumes:
        - application/x-www-form-urlencoded
      responses:
        204:
          description: |
            Successfully deleted the specified SKU Pack
          schema:
            type: object
        404:
          description: |
            The SKU Pack with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of profiles
      description: |
        Get the list of currently defined profiles. Profiles are scripts
        used by RackHD to control how a node PXE boots.
      tags: [ "/api/2.0" ]
      parameters:
        - name: macs
          in: query
          description: |
            List of valid MAC addresses to lookup
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: mac
          in: query
          description: |
            When macs parameter is not passed, passed with IP adds MAC address to lookup
          required: false
          type: string
        - name: ip
          in: query
          description: |
            When macs parameters is not passed, passed with MAC adds IP address to lookup
          required: false
          type: string
      responses:
        200:
          description: |
            Successfully retrieved a list of profiles for specified mac / ip
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/switch/error:
    x-swagger-router-controller: profiles
    post:
      operationId: profilesPostSwitchError
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post a switch error
      description: |
        Manually send a switch error to the log, since most switches
        don't generate errors.
      parameters:
        - name: body
          in: body
          description: |
            The switch error to send
          required: true
          schema:
                  $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully posted the switch error
          schema:
            type: object
        500:
          description: |
            Upload failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/switch/{vendor}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetSwitchVendor
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a profile
      description: |
        Get a profile rendered with the switch vendor name.
      parameters:
        - name: vendor
          in: path
          description: |
            The switch vendor name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully returned the profile
          schema:
            type: object
        404:
          description: |
            Profile not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/metadata:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetMetadata
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get list of profile metadata
      description: |
        Get the list of metadata associated with all known
        profiles.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the list of profile metadata
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/metadata/{name}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetMetadataByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: renderable.2.0.json
      summary: |
        Get a single profile's metadata from database
      description: |
        Get the metadata associated with the specified profile.
      parameters:
        - name: name
          in: path
          description: |
            The profile name
          required: true
          type: string
        - name: scope
          in: query
          description: The profile scope
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully returned the profile
          schema:
            type: object
        404:
          description: |
            The profile with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /profiles/library/{name}:
    x-swagger-router-controller: profiles
    get:
      operationId: profilesGetLibByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get contents of a profile
      description: |
        Get the contents of a profile specified by its name.
      parameters:
        - name: name
          in: path
          description: |
            The profile name
          required: true
          type: string
        - name: scope
          in: query
          description: The profile scope
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully returned profile
          schema:
            type: object
        404:
          description: |
            The profile with the specified name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: profilesPutLibByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Put a profile
      description: |
        Create or modify the specified profile metadata and contents.
      parameters:
        - name: name
          in: path
          description: |
            The profile name
          required: true
          type: string
        - name: scope
          in: query
          description: The profile scope
          required: false
          type: string
      consumes:
        - application/octet-stream
        - application/x-www-form-urlencoded
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully put the specified profile
          schema:
            type: object
        500:
          description: |
            Profile creation failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /obms:
    x-swagger-router-controller: obms
    get:
      #x-swagger-serializer: obms
      operationId: obmsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: obm.2.0.json
      summary: |
        Get list of all OBM service instances
      description: |
        Get a list of all OBM settings that have been associated
        with nodes. OBM settings allow RackHD to communicate with
        the BMC of a node.
      parameters:
        - name: query
          in: query
          description: Query string used to search for OBM information
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the list of OBM service instances
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: obmsPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: obm
      x-view: obm.2.0.json
      summary: |
        Put an OBM service
      description: |
        Create or update a single OBM service, and
        associate it with a node.
      parameters:
        - name: body
          in: body
          description: |
            The OBM settings information to create
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully put the OBM service
          schema:
            type: object
        500:
          description: |
            OBM service creation failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/definitions:
    x-swagger-router-controller: obms
    get:
      operationId: obmsDefinitionsGetAll
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of OBM services
      description: |
        Get a list of OBM schemas, which define the properties
        required to create OBM settings.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved a list of OBM schemas
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/definitions/{name}:
    x-swagger-router-controller: obms
    get:
      operationId: obmsDefinitionsGetByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get an OBM service definition
      description: |
        Get the contents of the specified OBM service schema.
      parameters:
        - name: name
          in: path
          description: |
            The OBM service name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the specified OBM shcema
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/led:
    x-swagger-router-controller: obms
    post:
      operationId: obmsPostLed
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Set identify light status
      description: |
        Enable or disable identify LED on node through OBM, if supported.
      parameters:
        - name: body
          in: body
          description: |
            If the body contains the property value: true, the LED will be lit.
            If the value property does not exist, the LED will be turned off.
            The body must contain the property nodeId set to the correct node
            identifier.
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: OBM settings accepted
        404:
          description: |
            The node with the identifier was not found or has no obm settings
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /obms/{identifier}:
    x-swagger-router-controller: obms
    get:
      operationId: obmsGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: obm.2.0.json
      summary: |
        Get an OBM service
      description: |
        Get the OBM settings associated with the specified identifier
      parameters:
        - name: identifier
          in: path
          description: |
            The OBM service identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the specified OBM service
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: obmsPatchById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: obm
      summary: |
        Patch OBM settings
      description: |
        Update the properties of the OBM settings with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The OBM service identifier
          required: true
          type: string
        - name: body
          in: body
          description: The OBM properties to patch
          required: true
          schema:
                  $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully patched the specified OBM settings
          schema:
            type: object
        500:
          description: |
            OBM patch failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: obmsDeleteById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete OBM settings
      description: |
        Delete the OBM settings with the specified identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The OBM service identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified OBM settings
          schema:
            type: object
        404:
          description: |
            The OBM service with the specified identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/tasks:
    x-swagger-router-controller: workflowTasks
    get:
      operationId: workflowsGetAllTasks
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of workflow tasks
      description: |
        Get a list of all workflow tasks that can be added to a workflow.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved workflow tasks
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: workflowsPutTask
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Put a workflow task
      description: |
        Create or update a workflow task in the library of tasks.
      parameters:
        - name: body
          in: body
          description: The workflow task properties
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully updated workflow task
          schema:
            type: object
        500:
          description: |
            Put workflow task failed
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/tasks/{injectableName}:
    x-swagger-router-controller: workflowTasks
    get:
      operationId: workflowsGetTasksByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a workflow task
      description: |
        Get the task with the specified value of the injectableName property.
      parameters:
        - name: injectableName
          in: path
          description: |
            The task injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the task with the specified injectable name
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteTasksByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a workflow task
      description: |
        Delete the workflow task with the specified value of the injectableName property.
      parameters:
        - name: injectableName
          in: path
          description: |
            The task injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified task
          schema:
            type: object
        404:
          description: |
            The task with the specified injectable name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/graphs:
    x-swagger-router-controller: workflowGraphs
    get:
      operationId: workflowsGetGraphs
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get list of workflow graphs
      description: |
        Get a list of all workflow graphs available to run.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved all workflow graphs
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: workflowsPutGraphs
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Put a graph
      description: |
        Create or modify a workflow graph in the graph library.
      parameters:
        - name: body
          in: body
          description: The workflow graph properties
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully updated workflow graph
          schema:
            type: object
        500:
          description: |
            Workflow graph was not updated
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/graphs/{injectableName}:
    x-swagger-router-controller: workflowGraphs
    get:
      operationId: workflowsGetGraphsByName
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a workflow graph
      description: |
        Get the workflow graph with the specified value of the injectableName property.
      parameters:
        - name: injectableName
          in: path
          description: |
            The workflow graph injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the workflow graph with the specified injectable name
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteGraphsByName
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a workflow graph
      description: |
        Delete the workflow graph with the specified value of the injectableName property.
      parameters:
        - name: injectableName
          in: path
          description: |
            The workflow graph injectable name
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified workflow graph
          schema:
            type: object
        404:
          description: |
            The graph with the specified injectable name was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /workflows:
    x-swagger-router-controller: workflows
    get:
      operationId: workflowsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a list of workflow instances
      description: |
        Get list workflow that have been run, or are currently running.
      tags: [ "/api/2.0" ]
      parameters:
        - name: active
          in: query
          description: |
            Query string to search for specific workflow properties
          required: false
          type: boolean
      responses:
        200:
          description: |
            Successfull retrieved workflows
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: workflowsPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Run a workflow
      description: |
        Run a workflow by specifying a workflow graph injectable name.
        The workflow is not associated with a node.
      parameters:
        - name: body
          in: body
          description: |
            The body must contain the name property with the
            value set to the injectable name of the workflow
            graph to run
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: Optionally specify the injectable name of the workflow graph to run
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully posted the workflow
          schema:
            type: object
        500:
          description: |
            Workflow was not run
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Upload failed
          schema:
            $ref: '#/definitions/Error'

  /workflows/{identifier}:
    x-swagger-router-controller: workflows
    get:
      operationId: workflowsGetByInstanceId
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a workflow
      description: |
        Get the workflow with the specified instance identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The workflow instance identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the specified workflow
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: workflowsDeleteByInstanceId
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a workflow
      description: |
        Delete the workflow with the specified instance identifier.
      parameters:
        - name: identifier
          in: path
          description: |
            The workflow instance identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified workflow
          schema:
            type: object
        404:
          description: |
            The specified workflow was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /workflows/{identifier}/action:
    x-swagger-router-controller: workflows
    put:
      operationId: workflowsAction
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Perform an action on a workflow
      description: |
        Perform the specified action on the workflow with the specified
        instance identifier. Currently, the cancel action is supported.
      parameters:
        - name: identifier
          in: path
          description: |
            The workflow instance identifier
          required: true
          type: string
        - name: action
          in: body
          description:
            The action property with the value of the desired action
          required: true
          schema:
            $ref: '#/definitions/action'
      tags: [ "/api/2.0" ]
      responses:
        202:
          description: |
            Successfully performed the action on the specified workflow
          schema:
            type: object
        404:
          description: |
            The workflow with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /nodes/{identifier}/workflows/action:
    x-swagger-router-controller: nodes
    put:
      operationId: nodesWorkflowActionById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Perform an action on a workflow
      description: |
        Perform an action on a workflow associated with a node. Currently,
        the cancel action is supported.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: action
          in: body
          description:
            The action property set to the command to execute
          required: true
          schema:
            $ref: '#/definitions/action'
      tags: [ "/api/2.0" ]
      responses:
        202:
          description: |
            Successfully performed the action on the specified workflow
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/workflows:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetWorkflowById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get all workflows for a node
      description: |
        Get a list of all workflows that have run against the specified node, or
        are currently running against the node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: active
          in: query
          description: |
            A query string to specify workflow properties to search for
          required: false
          type: boolean
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the workflows for specified node
          schema:
            type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: nodesPostWorkflowById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post workflow for the node
      description: |
        Run a workflow against for the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: body
          in: body
          description: The name property set to the injectableName property of the workflow graph
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: The optional name of the workflow graph to run
          required: false
          type: string

# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.
# We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object

      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully started the specified workflow
          schema:
            type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /nodes/{identifier}/pollers:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetPollersById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the pollers for a node
      description: |
        Get a list of all of the pollers for the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the pollers of specified node
          schema:
            type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs/{source}:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogSourceById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the catalogs for a node
      description: |
        Get a list of all of the catalogs for the specified node,
        containing the specified value of the source catalog property.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: source
          in: path
          description: |
            The source catalog name to fetch
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved specific source catalog of specified node
          schema:
            type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/catalogs:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetCatalogById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get the catalogs for a node
      description: |
        Get a list of all of the catalogs for the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved catalogs of specified node
          schema:
            type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/ssh:
    x-swagger-router-controller: nodes
    get:
      x-swagger-serializer: nodes
      operationId: nodesGetSshById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      tags: [ "/api/2.0" ]
      summary: |
        Get the ssh settings for a node
      description: |
        Get all of the ssh settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      responses:
        200:
          description: Successfully retrieved the ssh settings
          schema:
            type: object
        404:
          description: |
            The node with the identifier was not found or has no ssh settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      operationId: nodesPostSshById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post ssh settings
      description: |
        Create the ssh settings associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: body
          in: body
          description: |
            The ssh properties to create
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: Successfull created ssh settings
        404:
          description: |
            The specified node was not found or has no ssh settings.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/tags/{tagName}:
    x-swagger-router-controller: nodes
    delete:
      operationId: nodesMasterDelTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete tags nodes
      description: |
        Delete specified tag from all nodes.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: Successfully deleted tags
        404:
          description: The tag name identifier was not found

  /nodes/{identifier}:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: node.2.0.json
      summary: |
        Get nodes
      description: |
        Get a list of all nodes currently stored.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the list of nodes
          schema:
            type: array
            items:
              type: object
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: nodesDelById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a node
      description: |
        Delete the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: Successfully deleted the node
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      x-swagger-deserializer: nodes
      operationId: nodesPatchById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Patch a node
      description: |
        Modify the properties of the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: body
          in: body
          description: |
            The node properties to modify
          required: true
          schema:
           $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully modified the specified node
          schema:
            type: object
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /nodes/{identifier}/tags:
    x-swagger-router-controller: nodes
    get:
      operationId: nodesGetTagsById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get node tags
      description: |
        Get a list of all tags association with the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved node tags
          schema:
            type: array
            items:
              type: object
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: nodesPatchTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: node.2.0.json#/definitions/PartialNode
      summary: |
        Patch node tags
      description: |
        Modify the tags associated with a node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: body
          in: body
          description: |
            The tag properties to patch
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully modified tags
          schema:
            type: object
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes/{identifier}/tags/{tagName}:
    x-swagger-router-controller: nodes
    delete:
      operationId: nodesDelTagById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a tag from node
      description: |
        Delete a tag from the specified node.
      parameters:
        - name: identifier
          in: path
          description: |
            The node identifier
          required: true
          type: string
        - name: tagName
          in: path
          description: The name of the tag
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: Successfully deleted tag
        404:
          description: The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /nodes:
    x-swagger-router-controller: nodes
    get:
      x-view: node.2.0.json
      operationId: nodesGetAll
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a list of nodes
      description: |
        Get a list of all currently stored nodes.
      parameters:
        - name: type
          in: query
          description: node type
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the list of nodes
          schema:
            type: array
            items:
              type: object
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-swagger-deserializer: nodes
      x-swagger-schema: node.2.0.json#/definitions/Node
      operationId: nodesPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post a node
      description: |
        Create and store a new node manually.
      parameters:
      - name: identifiers
        in: body
        description: |
          The properties of the new node
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: Successfully created node
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /lookups:
    x-swagger-router-controller: lookups
    get:
      operationId: lookupsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a list of lookups
      description: |
        Get a list of all lookups currently stored. Lookups
        relate mac addresses to ip addresses.
      parameters:
      - name: q
        in: query
        description: Query string specifying properties to search for
        required: false
        type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the list of lookups
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: lookupsPost
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: Lookups.2.0.json#/definitions/LookupPost
      summary: |
        Post a lookup
      description: |
        Create and store a new lookup.
      parameters:
      - name: body
        in: body
        description: The properties of the lookup
        required: true
        schema:
         $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: Successfully created new lookup
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /lookups/{id}:
    x-swagger-router-controller: lookups
    get:
      operationId: lookupsGetById
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a lookup
      description: |
        Get a lookup by specifying its identifier.
      parameters:
        - name: id
          in: path
          description: The lookup identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the lookup
          schema:
            type: array
            items:
              type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: lookupsDelById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a lookup
      description: |
        Delete the specified lookup.
      parameters:
        - name: id
          in: path
          description: |
            The identifier of the lookup to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: Successfully deleted lookup
        404:
          description: The specified lookup was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: lookupsPatchById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-swagger-schema: Lookups.2.0.json#/definitions/LookupBase
      summary: |
        Patch a lookup
      description: |
        Modify the properties of a lookup.
      parameters:
        - name: id
          in: path
          description: |
            The id of the lookup to patch
          required: true
          type: string
        - name: body
          in: body
          description: |
            The lookup properties to be modified
          required: true
          schema:
           $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully modified the lookup
          schema:
            type: object
        404:
          description: The specified lookup was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /files/{fileidentifier}:
    x-swagger-router-controller: files
    get:
      operationId: filesGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a file
      description: |
        Get file based on uuid or file name.
      parameters:
        - name: fileidentifier
          in: path
          description: The uuid or file name of a file as provided when you originally stored it
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
# https://github.com/swagger-api/swagger-spec/issues/260 means we can't
# describe the return of a file easily today until jsonspec and swagger
# are "fixed"
        200:
          description: Successfully retrieved specified file
          schema:
            type: file
        404:
          description: File not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      operationId: filesPut
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-view: file.2.0.json
      summary: |
        Put a file
      description: |
        Put file based on its filename. Returns the uuid of the stored file.
      parameters:
        - name: fileidentifier
          in: path
          description: The filename of the file you want to store
          required: true
          type: string
# https://github.com/swagger-api/swagger-spec/issues/326 does not yet accept files
#       - name: content
#          in: body
#          description: the attachment content
#          required: true
#          schema:
#            type: file
#      consumes:
#        - application/octet-stream
      tags: [ "/api/2.0" ]
      consumes:
        - application/octet-stream
        - application/x-www-form-urlencoded
      responses:
        201:
          description: Successfully stored file
          schema:
            type: string
        500:
          description: Failure serving file request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: filesDelete
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Delete a file
      description: |
        Delete a file based on uuid.
      parameters:
        - name: fileidentifier
          in: path
          description: UUID of the file you wish to delete
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: File successfully deleted
        404:
          description: File not found.
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Error deleting file from the database
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{filename}/md5:
    x-swagger-router-controller: files 
    get:
      operationId: filesMd5Get
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get md5sum of file
      description: |
        Get md5sum based on file name.
      parameters:
        - name: filename
          in: path
          description: File name of a file as provided when you originally stored it
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the md5sum of the specified file
          schema:
            type: object
        404:
          description: File not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files/{filename}/metadata:
    x-swagger-router-controller: files
    get:
      operationId: filesMetadataGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      x-view: file.2.0.json
      summary: |
        Get file metadata
      description: |
        Get file metadata by file name.
      parameters:
        - name: filename
          in: path
          description: The name of a file as provided when you originally stored it
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the specified file
          schema:
            type: object
        404:
          description: File not found
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Failed to serve file request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /files:
    x-swagger-router-controller: files
    get:
      operationId: filesGetAll
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get all files
      description: |
        Get a list of all files currently stored.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the files
          schema:
            type: object
        500:
          description: Failed to serve file request
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /config:
    x-swagger-router-controller: config
    get:
      operationId: configGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get server configuration
      description: |
        Get the RackHD server configuration properties.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: Successfully retrieved the configuration
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      operationId: configPatch
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Patch server configuration
      description: |
        Modify the RackHD server configuration.
      tags: [ "/api/2.0" ]
      consumes:
        - application/json
      parameters:
        - name: config
          in: body
          description: The configuration properties to be modified
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      responses:
        200:
          description: Successfully modified the configuration
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /catalogs:
    x-swagger-router-controller: catalogs
    get:
      operationId: catalogsGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get all catalogs
      description: |
        Get an array of catalog data describing all hardware in the system.
      parameters:
        - name: query
          in: query
          description: A query string containing catalog properties to search
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved a list of catalogs
          schema:
            # a pointer to a definition
            $ref: "#/definitions/VersionsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /catalogs/{identifier}:
    x-swagger-router-controller: catalogs
    get:
      operationId: catalogsIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a catalog
      description: |
        Get a catalog based on its catalog identifier.
      parameters:
        - name: identifier
          in: path
          description: The catalog identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved the catalog
          schema:
            $ref: "#/definitions/VersionsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /tags:
    x-swagger-router-controller: tags
    get:
      operationId: getAllTags
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Get all tags
      description: |
        Get a list of all tags currently stored.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved all tags
          schema:
            type: array
            items: 
              type: object
        404:
          description: |
            Not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      operationId: createTag
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: Post a tag
      description: |
        Create a new tag.
      parameters:
        - name: body
          in: body
          description: The tag properties
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created the tag
          schema:
            type: object
        500:
          description: |
            The tag could not be created
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}:
    x-swagger-router-controller: tags
    get:
      operationId: getTag
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Get a tag
      description: |
        Get the data associated with the specified tag.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved information about the specified tag
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      operationId: deleteTag
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: Delete a tag
      description: |
        Delete the specified tag.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the tag
          schema:
            type: object
        404:
          description: |
            The tag name identifier was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /tags/{tagName}/nodes:
    x-swagger-router-controller: tags
    get:
      operationId: getNodesByTag
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: Get nodes with the specified tag
      description: |
        Get a list of nodes with the specified tag.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the list of nodes with the specified tag
          schema:
            type: array
            items:
              type: object
        404:
          description: |
            The specified node was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /tags/{tagName}/nodes/workflows:
    x-swagger-router-controller: tags
    post:
      operationId: postWorkflowById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Post workflow to node by tag
      description: |
        Start a workflow against all nodes with the specified tag.
      parameters:
        - name: tagName
          in: path
          description: The tag identifier
          required: true
          type: string
        - name: body
          in: body
          description: The workflow options to post
          required: false
          schema:
            $ref: '#/definitions/generic_obj'
        - name: name
          in: query
          description: Query string specifying the optional workflow injectable name
          required: false
          type: string

# The OpenAPI Specification 2.0 does not allow type:object for a parameter in a query.
# We will use the express req.query to decode
#        - name: options
#          in: query
#          description: options
#          required: false
#          type: object

      tags: [ "/api/2.0" ]
      responses:
        202:
          description: |
            Successfully posted workflows
          schema:
            type: object
        404:
          description: |
            The specified tag was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    x-swagger-router-controller: users
    get:
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      operationId: listUsers
      summary: |
        Get the list of users
      description: |
        Get the list of users currently stored in the system.
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the list of users
          schema:
            type: array
            items:
              $ref: '#/definitions/user_obj'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt', 'anonymous' ]
      operationId: addUser
      summary: |
        Post a new user
      description: |
        Create a new user and store it.
      parameters:
        - name: body
          in: body
          description: The user information
          required: true
          schema:
            $ref: '#/definitions/user_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully created the user
          schema:
            type: object
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{name}:
    x-swagger-router-controller: users
    patch:
      x-privileges: [ 'ConfigureUsers', 'ConfigureSelf' ]
      x-authentication-type: [ 'jwt' ]
      operationId: modifyUser
      summary: |
        Patch a user
      description: |
        Modify the properties of a user.
      parameters:
        - name: name
          in: path
          description: The username
          required: true
          type: string
        - name: body
          in: body
          description: The user information
          required: true
          schema:
            $ref: '#/definitions/user_obj'
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully modified the user
          schema:
            type: object
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      operationId: getUser
      summary: |
        Get a user
      description: |
        Get information about the specified user.
      parameters:
        - name: name
          in: path
          description: The username
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved the specified user
          schema:
            $ref: '#/definitions/user_obj'
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      operationId: removeUser
      summary: |
        Delete a user
      description: |
        Delete the specified user.
      parameters:
        - name: name
          in: path
          description: The username
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        204:
          description: |
            Successfully deleted the specified user
        401:
          description: Unauthorized
          schema:
            type: object
        403:
          description: Forbidden
          schema:
            type: object
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /schemas/tasks/{identifier}:
    x-swagger-router-controller: schemas2
    get:
      operationId: taskSchemasIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a task schema
      description: |
        Get the specified task schema.
      parameters:
        - name: identifier
          in: path
          description: The identifier of the task schema
          required: true
          type: string
        - name: resolveRef
          in: query
          description: The reference resolve flag
          required: false
          type: boolean
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved the task schema
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schemas/tasks:
    x-swagger-router-controller: schemas2
    get:
      operationId: taskSchemasGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get all task schemas
      description: |
        Get a list of all task schemas currently stored in the system.
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved the list of task schemas
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schemas/{identifier}:
    x-swagger-router-controller: schemas2
    get:
      operationId: schemasIdGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get a schema
      description: |
        Get the specified schema.
      parameters:
        - name: identifier
          in: path
          description: The identifier of the schema
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved the schema
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /schemas:
    x-swagger-router-controller: schemas2
    get:
      operationId: schemasGet
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]
      summary: |
        Get all schemas
      description: |
        Get a list of all schemas currently stored in the system.
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved the list of schemas
          schema:
            type: object
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks/bootstrap.js:
    x-swagger-router-controller: tasks
    get:
#      disable for now until we are using redfish renderer
#      x-swagger-template: 'bootstrap.js'
      operationId: getBootstrap
      summary: |
        Get tasks bootstrap.js
      description: |
        Used internally by the system - get tasks bootstrap.js
      parameters:
        - name: macAddress
          in: query
          description: Query string containing the mac address
          required: false
          type: string
      tags: [ "/api/2.0" ]
      responses:
        "200":
          description: Successfully retrieved bootstrap.js
          schema:
            $ref: "#/definitions/VersionsResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /tasks/{identifier}:
    x-swagger-router-controller: tasks
    get:
    #do I need a serializer?
      operationId: getTasksById
      x-view: tasks.2.0.json
      x-privileges: [ 'Read' ]
      x-authentication-type: [ 'jwt' ]

      summary: |
        Get a task
      description: |
        Get the specified task.
      parameters:
        - name: identifier
          in: path
          description: |
            The task identifier
          required: true
          type: string
      tags: [ "/api/2.0" ]
      responses:
        200:
          description: |
            Successfully retrieved a single task
          schema:
            type: object
        404:
          description: |
            There specified task was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
#do I need a serializer      x-swagger-serializer: pollers
      operationId: postTaskById
      x-privileges: [ 'Write' ]
      x-authentication-type: [ 'jwt' ]
      x-view: tasks.2.0.json
      summary: |
        Post a task
      description: |
        Start the specified task
      parameters:
        - name: identifier
          in: path
          description: |
            The task identifier
          required: true
          type: string
        - name: body
          in: body
          description: |
            The obm settings to apply
          required: true
          schema:
            $ref: '#/definitions/generic_obj'
      tags: [ "/api/2.0" ]
      responses:
        201:
          description: |
            Successfully posted the specified task
          schema:
            type: object
        404:
          description: |
            The specified task was not found
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  VersionsResponse:
    required:
      - message
    properties:
      message:
        type: string

  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

  catalog:
    type: object
    properties:
      id:
        type: string
      source:
        type: string
      node:
        $ref: '#/definitions/node'
      data:
        type: object
        description: arbitrary json object
    required:
    - id
    - source
    - node

  node:
    type: object
    properties:
      id:
        type: string
      profile:
        type: string
      name:
        type: string
      obmSettings:
        type: object
      ipAddresses:
        type: object
      workflows:
        type: array
        items:
          $ref: '#/definitions/graphobject'
      catalogs:
        type: array
        items:
          $ref: '#/definitions/catalog'
      sku:
        $ref: '#/definitions/sku'
    required:
    - profile
    - name

  graphobject:
    properties:
      id:
        type: string
      instanceid:
        type: string
      context:
        type: object
      definition:
        type: object
      tasks:
        type: object
      node:
        $ref: '#/definitions/node'

  sku:
    properties:
      id:
        type: string
      name:
        type: string
      rules:
        type: object
      nodes:
        type: array
        items:
          $ref: '#/definitions/node'
      discoveryGraphName:
        type: string
      discoveryGraphOptions:
        type: object

  lease:
    properties:
      mac:
        type: string
      ipAddress:
        type: string
      reservationTimer:
        type: integer
        format: int32
      reservationExpiresAt:
        type: integer
        format: int64
      renewalTimer:
        type: integer
        format: int32
      rebindingTimer:
        type: integer
        format: int32
      expirationTimer:
        type: integer
        format: int32
      renewalExpiresAt:
        type: integer
        format: int64
      rebindExpiresAt:
        type: integer
        format: int64
      leaseExpiresAt:
        type: integer
        format: int64
      boundFlag:
        type: boolean
      reservedFlag:
        type: boolean
      reserveTimer:
        type: string
        format: int64

    example:
      mac: 08:00:27:52:d2:a4
      ipAddress: 10.1.1.2
      reservationTimer: 30
      renewalTimer: 21600
      rebindingTimer: 4320
      expirationTimer: 86400
      renewalExpiresAt: 1424149074811
      rebindExpiresAt: 1424131794811
      leaseExpiresAt: 1424213874811
      boundFlag: true
      reservedFlag: false

    required:
    - mac
    - ipAddress

  generic_obj:
   type: object

  user_obj:
    properties:
      username:
        type: string
      password:
        type: string
      role:
        type: string
  action:
    description: Action object
    properties:
      command:
        type: string
        description: 'Command to execute'
        enum: [ "cancel" ]
      options:
        type: object
        description: 'Command options object'
    required:
      - command
